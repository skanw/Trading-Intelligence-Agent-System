version: '3.8'

services:
  # Core Infrastructure
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: trading_postgres
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d trading_system"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Message Queue (Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: trading_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: trading_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: trading_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - prometheus-pushgateway

  prometheus-pushgateway:
    image: prom/pushgateway:v1.6.0
    container_name: trading_pushgateway
    ports:
      - "9091:9091"
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: trading_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    environment:
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_ROUTING_KEY=${PAGERDUTY_ROUTING_KEY}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: trading_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.3.0
    container_name: trading_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus

  # Enhanced Signal Monitoring
  signal-monitor:
    build:
      context: .
      dockerfile: monitoring/Dockerfile.monitoring
    container_name: trading_signal_monitor
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_GATEWAY=prometheus-pushgateway:9091
    volumes:
      - ./monitoring/checkpoints:/app/checkpoints
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      prometheus-pushgateway:
        condition: service_started
    restart: unless-stopped
    command: ["python", "monitor_signals_enhanced.py", "--continuous", "--prometheus-gateway", "prometheus-pushgateway:9091", "--checkpoint-file", "/app/checkpoints/signal_monitor.checkpoint"]

  # Trading System Services
  data-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_data_pipeline
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: python -m src.agents.data_pipeline
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data

  news-intelligence:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_news_intel
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      data-pipeline:
        condition: service_started
    command: python -m src.agents.news_intelligence
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models

  market-intelligence:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_market_intel
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      data-pipeline:
        condition: service_started
    command: python -m src.agents.market_intelligence
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  fundamental-analysis:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_fundamental
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      data-pipeline:
        condition: service_started
    command: python -m src.agents.fundamental_analysis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  technical-analysis:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_technical
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      data-pipeline:
        condition: service_started
    command: python -m src.agents.technical_analysis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  risk-management:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_risk_mgmt
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      - news-intelligence
      - market-intelligence
      - fundamental-analysis
      - technical-analysis
    command: python -m src.agents.risk_management
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  portfolio-management:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_portfolio_mgmt
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      - news-intelligence
      - market-intelligence
      - fundamental-analysis
      - technical-analysis
    command: python -m src.agents.portfolio_management
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_orchestrator
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      - risk-management
      - portfolio-management
    command: python -m src.agents.orchestrator
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Web Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_dashboard
    ports:
      - "8501:8501"
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    env_file:
      - .env
    depends_on:
      - orchestrator
    command: streamlit run src/dashboard/app.py --server.port=8501 --server.address=0.0.0.0
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # API Gateway
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading_api
    ports:
      - "8000:8000"
    environment:
      - TRADING_ENV=production
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      - orchestrator
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Log aggregation
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.5.0
    container_name: trading_filebeat
    volumes:
      - ./logs:/usr/share/filebeat/logs:ro
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: trading_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: trading_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  zookeeper_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  elasticsearch_data:

networks:
  default:
    name: trading_network 